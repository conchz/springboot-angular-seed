group 'com.github.lavenderx'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE'
        classpath 'us.kirchmeier:gradle-capsule-plugin:1.0.2'
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.8'
    }
}

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'us.kirchmeier.capsule'
apply plugin: 'com.bmuschko.docker-remote-api'

def jdkVersion = '1.8'
def sourceEncoding = 'UTF-8'
def appVersion = version.toString().replaceAll("-(?i)SNAPSHOT", "")
def serverPort = 'server.port'

sourceCompatibility = "$jdkVersion"
targetCompatibility = "$jdkVersion"

compileJava.options.encoding = "$sourceEncoding"
compileGroovy.options.encoding = "$sourceEncoding"
compileTestJava.options.encoding = "$sourceEncoding"
compileTestGroovy.options.encoding = "$sourceEncoding"

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy']
        }

        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

ext {
    springbootVersion = '1.3.5.RELEASE'

    def props = new Properties()
    file('src/main/resources/common-config.properties').withInputStream {
        props.load(it)
    }
    props.each {
        if ("$serverPort" == "$it.key") {
            serverPort = it.value
        }
    }
}

bootRun {
    // ex: gradle bootRun -PjvmArgs="-Dspring.profiles.active=dev"
    if (project.hasProperty('jvmArgs')) {
        jvmArgs = project.jvmArgs.split("\\s+") as List
    }

    addResources = true
}

docker {
    url = 'http://127.0.0.1:2375'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'ch.qos.logback:logback-classic:1.1.7'
    compile 'com.google.guava:guava:19.0'
    compile 'org.codehaus.groovy:groovy-all:2.4.6'
    compile 'org.reflections:reflections:0.9.10'
    compile("org.springframework.boot:spring-boot-starter-web:$springbootVersion") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow:$springbootVersion"
    compile "org.springframework.boot:spring-boot-starter-security:$springbootVersion"
    compile "org.springframework.boot:spring-boot-starter-mustache:$springbootVersion"
    compile "org.springframework.boot:spring-boot-starter-amqp:$springbootVersion"
    compile "org.springframework.boot:spring-boot-devtools:$springbootVersion"
    compile 'org.springframework.data:spring-data-mongodb:1.8.4.RELEASE'

    // Webjars dependencies
    compile 'org.webjars:webjars-locator:0.31'
    compile 'org.webjars:requirejs:2.2.0'
    compile 'org.webjars:jquery:2.2.3' // for bootstrap
    compile('org.webjars:angularjs:1.5.5') {
        exclude group: 'org.webjars', module: 'jquery'
    }
    compile('org.webjars:angular-ui-bootstrap:1.3.2') {
        exclude group: 'org.webjars', module: 'jquery'
    }
    compile 'org.webjars:ui-grid:3.1.1'

    testCompile "org.springframework.boot:spring-boot-starter-test:$springbootVersion"
}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import us.kirchmeier.capsule.task.FatCapsule

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

task copyLicense {
    outputs.file new File("$buildDir/LICENSE")
    doLast {
        copy {
            from 'LICENSE'
            into "$buildDir"
        }
    }
}

jar.from(copyLicense) {
    into 'META-INF'
}

task fatCapsule(type: FatCapsule) {
    applicationClass 'com.github.lavenderx.ApplicationBoot'

    baseName = project.name

    capsuleManifest {
        args = ['--very-fancy']
        applicationName = project.name
        applicationId = UUID.randomUUID().toString().replaceAll("-", "")
        applicationVersion = "$appVersion"
        minJavaVersion = "$jdkVersion"
        javaVersion = "$jdkVersion"
        jdkRequired = true
    }
}

task copyJar(type: Copy) {
    dependsOn fatCapsule

    from("build/libs/${project.name}-${project.version}-capsule.jar") {
        rename { String fileName ->
            fileName.replace("-${project.version}-capsule", "")
        }
    }
    from('src/main/docker')
    into 'build/docker'

    includeEmptyDirs = false
}

task createDockerfile(type: Dockerfile) {
    dependsOn copyJar

    destFile = project.file('build/docker/Dockerfile')

    from 'java:8-jre'
    maintainer 'Zongzhi Bai "dolphineor@gmail.com"'
    copyFile 'springboot-angular-seed.jar', '/opt'
    copyFile 'startup', '/'
    runCommand 'chmod +x /startup'
    exposePort "$serverPort".toInteger()
    entryPoint '/startup'
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile

    inputDir = createDockerfile.destFile.parentFile
    tag = "lavenderx/$project.name:$appVersion"
}

build.dependsOn copyJar
