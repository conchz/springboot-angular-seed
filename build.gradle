group 'com.github.lavenderx'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE'
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.8'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-java-application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

ext {
    springbootVersion = '1.3.3.RELEASE'

    appVersion = version.toString().replaceAll("-(?i)SNAPSHOT", "")
    serverPort = "server.port"

    def props = new Properties()
    file("src/main/resources/common-config.properties").withInputStream {
        props.load(it)
    }
    props.each {
        if ("$serverPort" == "$it.key") {
            serverPort = it.value
        }
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
        testOutputDir = file("$buildDir/classes/test/")
    }
}

checkstyle {
    toolVersion = '6.17'
    ignoreFailures = true
    configFile = file("${rootDir}/google_checks.xml")
}

bootRepackage {
    mainClass = 'com.github.lavenderx.ApplicationBoot'
}

bootRun {
    // ex: gradle bootRun -PjvmArgs="-Dspring.profiles.active=dev"
    if (project.hasProperty('jvmArgs')) {
        jvmArgs = project.jvmArgs.split("\\s+") as List
    }
}

docker {
    javaApplication {
        baseImage = 'dockerfile/java:openjdk-8-jre'
        maintainer = 'Zongzhi Bai "dolphineor@gmail.com"'
        port = "$serverPort".toInteger()
        tag = "$project.name:$appVersion"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'ch.qos.logback:logback-classic:1.1.7'
    compile("org.springframework.boot:spring-boot-starter-web:$springbootVersion") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow:$springbootVersion"
    compile "org.springframework.boot:spring-boot-starter-security:$springbootVersion"
    compile "org.springframework.boot:spring-boot-starter-mustache:$springbootVersion"
    compile "org.springframework.boot:spring-boot-starter-amqp:$springbootVersion"
    compile "org.springframework.boot:spring-boot-devtools:$springbootVersion"
    compile 'com.google.guava:guava:19.0'

    // Webjars dependencies
    compile 'org.webjars:webjars-locator:0.31'
    compile 'org.webjars:requirejs:2.2.0'
    compile 'org.webjars:jquery:1.12.3' // for bootstrap
    compile('org.webjars:angularjs:1.5.5') {
        exclude group: 'org.webjars', module: 'jquery'
    }
    compile('org.webjars:angular-ui-bootstrap:1.3.2') {
        exclude group: 'org.webjars', module: 'jquery'
    }
    compile 'org.webjars:ui-grid:3.1.1'

    testCompile "org.springframework.boot:spring-boot-starter-test:$springbootVersion"
}
