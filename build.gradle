group 'com.github.lavenderx'
version '0.1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE'
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.8'
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'

def springbootVersion = '1.3.5.RELEASE'
def serverPort = 'server.port'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

ext {
    def props = new Properties()
    file('src/main/resources/common-config.properties').withInputStream {
        props.load(it)
    }
    props.each {
        if ("$serverPort" == "$it.key") {
            serverPort = it.value
        }
    }
}

checkstyle {
    toolVersion = '6.18'
    ignoreFailures = true
    configFile = file("$rootDir/google_checks.xml")
}

bootRun {
    // ex: gradle bootRun -PjvmArgs="-Dspring.profiles.active=dev"
    if (project.hasProperty('jvmArgs')) {
        jvmArgs = project.jvmArgs.split("\\s+") as List
    }

    addResources = true
}

jar {
    manifest {
        attributes 'Implementation-Title': 'springboot-angular-seed',
                'Implementation-Version': version.toString().replaceAll("-(?i)SNAPSHOT", ""),
                'Main-Class': 'org.springframework.boot.loader.JarLauncher',
                'Start-Class': 'com.github.lavenderx.ApplicationBoot'
    }

    encoding = 'UTF-8'
    zip64 = true
}

docker {
    url = 'http://server01:2375'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'ch.qos.logback:logback-classic:1.1.7'
    compile 'com.google.guava:guava:19.0'
    compile 'org.projectlombok:lombok:1.16.8'
    compile 'org.reflections:reflections:0.9.10'

    compile("org.springframework.boot:spring-boot-starter-web:$springbootVersion") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow:$springbootVersion"
    compile "org.springframework.boot:spring-boot-starter-security:$springbootVersion"
    compile "org.springframework.boot:spring-boot-starter-mustache:$springbootVersion"
    compile "org.springframework.boot:spring-boot-starter-amqp:$springbootVersion"
    compile "org.springframework.boot:spring-boot-devtools:$springbootVersion"

    // Webjars dependencies
    compile 'org.webjars:webjars-locator:0.31'
    compile 'org.webjars:requirejs:2.2.0'
    compile 'org.webjars:jquery:2.2.3' // for bootstrap
    compile('org.webjars:angularjs:1.5.5') {
        exclude group: 'org.webjars', module: 'jquery'
    }
    compile('org.webjars:angular-ui-bootstrap:1.3.2') {
        exclude group: 'org.webjars', module: 'jquery'
    }
    compile 'org.webjars:ui-grid:3.1.1'

    testCompile "org.springframework.boot:spring-boot-starter-test:$springbootVersion"
}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

task copyDistFiles(type: Copy) {
    dependsOn jar

    from("build/libs/${project.name}-${project.version}.jar") {
        rename { String fileName ->
            fileName.replace("-${project.version}", "")
        }
    }
    from 'src/main/docker'
    into 'build/docker'

    includeEmptyDirs = false
}

task createDockerfile(type: Dockerfile) {
    dependsOn copyDistFiles

    destFile = project.file('build/docker/Dockerfile')

    from 'java:8-jre'
    maintainer 'Zongzhi Bai "dolphineor@gmail.com"'
    copyFile 'springboot-angular-seed.jar', '/opt'
    copyFile 'startup', '/'
    runCommand 'chmod +x /startup'
    exposePort "$serverPort".toInteger()
    entryPoint '/startup'
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile

    inputDir = createDockerfile.destFile.parentFile
    tag = "lavenderx/$project.name:" + version.toString().replaceAll("-(?i)SNAPSHOT", "")
}

build.dependsOn copyDistFiles
